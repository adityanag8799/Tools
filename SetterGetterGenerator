package com.aditya.nag.util;
import java.lang.reflect.*;
import java.io.*;
import java.util.*;
public class SetterGetterGenerator
{
private static String getDefaultValue(Class m)
{
String className=m.getName();
if(className.equals("java.lang.Long") || className.equals("long")) return "0";
if(className.equals("java.lang.Integer") || className.equals("int")) return "0";
if(className.equals("java.lang.Float") || className.equals("float")) return "0.0f";
if(className.equals("java.lang.Double") || className.equals("double")) return "0";
if(className.equals("java.lang.Character") || className.equals("char")) return "''";
if(className.equals("java.lang.Byte") || className.equals("byte")) return "0";
if(className.equals("java.lang.Short") || className.equals("short")) return "0";
if(className.equals("java.lang.Boolean") || className.equals("boolean")) return "false";
if(className.equals("java.lang.String")) return "\"\"";
return "null";
}
public static void main(String gg[])
{
if(gg.length==0)
{
System.out.println("Usage :javac -classpath path_to_jar ;. com.aditya.nag.util.SetterGetterGenerator class_name constructor=true/false ");
return;
}
if(gg.length==2)
{
if(gg[1].equalsIgnoreCase("constructor=true")==false && gg[1].equalsIgnoreCase("constructor=false")==false)
{
System.out.println("Usage :javac -classpath path_to_jar ;. com.aditya.nag.util.SetterGetterGenerator class_name constructor=true/false ");
return;
}
}
String className=gg[0];
try
{
Class c=Class.forName(className);
Field fields[]=c.getDeclaredFields();
Field field;
ADList<String> list=new ADLinkedList<String>();
String line;
String setterName,getterName;
String fieldName;
String ADp;
Class fieldType;
if(gg.length==1 || (gg.length==2 && gg[1].equalsIgnoreCase("constructor=true")))
{
line="public "+c.getSimpleName()+"()";
list.add(line);
list.add("{");
for(int e=0;e<fields.length;e++)
{
field=fields[e];
line="this."+field.getName()+"="+getDefaultValue(field.getType())+";";
list.add(line);
}
list.add("}");
}
for(int e=0;e<fields.length;e++)
{
field=fields[e];
fieldName=field.getName();
fieldType=field.getType();
if(fieldName.charAt(0)>=97 && fieldName.charAt(0)<=122)
{
ADp=fieldName.substring(0,1).toUpperCase()+fieldName.substring(1);
}
else
{
ADp=fieldName;
}
setterName="set"+ADp;
getterName="get"+ADp;
line="public void "+setterName+"("+fieldType.getName()+" "+fieldName+")";
list.add(line);
list.add("{");
line="this."+fieldName+"="+fieldName+";";
list.add(line);
list.add("}");
line="public "+fieldType.getName()+" "+getterName+"()";
list.add(line);
list.add("{");
line="return this."+fieldName+";";
list.add(line);
list.add("}");
}
File file=new File("ADp.ADp");
RandomAccessFile randomAccessFile;
randomAccessFile=new RandomAccessFile(file,"rw");
ADIterator<String> iterator;
iterator=list.iterator();
while(iterator.hasNext())
{
randomAccessFile.writeBytes(iterator.next()+"\r\n");
}
randomAccessFile.close();
System.out.println("Setter/getter generator for : "+c.getName()+"generated in file named as ADp.ADp");
}catch(ClassNotFoundException cnfe)
{
System.out.println("Unable to load class, classpath missing");
}
catch(IOException ioException)
{
System.out.println(ioException.getMessage());
}
}
}
